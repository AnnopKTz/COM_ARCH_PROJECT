        lw          0   1    n          //$1 = n 
        lw          0   2   41          //$2 = r   
        lw          0   6   39          //$6(temp) = address of start
        jalr        6   7               //call start $7=return address; $3=answer    
        halt                            //end of program        
start   sw          5   7   44          //save return address on stack 
        lw          0   6   42          //temp = 1  
        add         5   6   5           //$5(1) = $5 + 1 // เพิ่มค่าใน stack pointer  
        sw          5   1   44          //save $1 on stack
        add         5   6   5           //เพิ่มค่าใน stack pointer  
        sw          5   2   44          //save $2 on stack 
        add         5   6   5           //เพิ่มค่าใน stack pointer     
        sw          5   4   44          //save $4 on stack
        add         5   6   5           //เพิ่มค่าใน stack pointer     
        beq         0   2   L2          //if r == 0 go L2  
        beq         1   2   L2          //if n == r go L2 
        lw          0   6   43          //$6 = -1   
        add         1   6   1           //n = n - 1     
        lw          0   6   39          //$6 เก็บค่า addr start  
        jalr        6   7               //call start, $7 keep the address of next line      
        add         0   3   4           //$0 = $3 + $4    
        lw          0   6   43          //temp = -1  
        add         2   6   2           //r = r -1   
        lw          0   6   39          //temp = address of start    
        jalr        6   7               //call start, $7 keep the address of next line     
        add         3   4   3           //$3(answer) = $4 + $3    
        beq         0   0   L3          //go to L3 
L2      add         0   6   3           //return 1
        beq         0   0   L3          //go to L3    
L3      lw          0   6   43          //$6 = -1  
        add         5   6   5           //$5(1) = $5 - 1 // ลดค่าใน stack pointer     
        lw          5   4   44          //recover original $4  
        add         5   6   5           //ลดค่าใน stack pointer    
        lw          5   2   44          //recover original $2  
        add         5   6   5           //ลดค่าใน stack pointer        
        lw          5   1   44          //recover original $1  
        add         5   6   5           //ลดค่าใน stack pointer // ค่าใน stack pointer = 0        
        lw          5   7   44          //recover original return address   
        jalr        7   6               //return. (to end the program)      
stAddr  .fill       start               //      
n       .fill       4                   //           
r       .fill       2                   //         
pos1    .fill       1                   //
neg1    .fill       -1                  //      
stack   .fill       0                   // 